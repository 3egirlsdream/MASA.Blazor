@using System.Drawing
@using System.ComponentModel.Design
@namespace Masa.Blazor.ColorPicker
@inherits BDomComponentBase

<div class="@CssProvider.GetClass("canvas")"
     style="@CssProvider.GetStyle("canvas")"
     @onclick="HandleOnClick"
     @onmousedown="HandleOnMouseDown"
     @onmousedown:preventDefault
     @ref="Ref">
    <canvas @ref="@GenRef("canvas").Ref"
            width="@Width"
            height="@Height">
    </canvas>

    <div class="@CssProvider.GetClass("canvas-dot")"
         style="@CssProvider.GetStyle("canvas-dot")">
    </div>
</div>

@code {

    [Parameter]
    public Color Color { get; set; }

    [Parameter]
    public bool Disabled { get; set; }

    [Parameter]
    public StringNumber DotSize { get; set; } = 10;

    [Parameter]
    public StringNumber Height { get; set; } = 150;

    [Parameter]
    public StringNumber Width { get; set; } = 300;

    [Parameter]
    public EventCallback<Color> OnColorUpdate { get; set; }

    private BoundingClientRect? _boundingRect;

    private (double X, double Y) Dot
    {
        get
        {
            if (Color.IsEmpty)
            {
                return (0, 0);
            }

            var hsva = Color.ToHSVA();

            return (hsva.S * Width.ToInt32(), (1 - hsva.V) * Height.ToInt32());
        }
    }

    protected override void SetComponentClass()
    {
        base.SetComponentClass();

        CssProvider.UseBem("m-color-picker")
                   .Element("canvas", _ => { }, style =>
                   {
                       style.AddWidth(Width)
                            .AddHeight(Height);
                   })
                   .Element("canvas-dot", css => { css.Modifiers(m => m.Modifier(Disabled)); }, style =>
                   {
                       var radius = DotSize.ToInt32() / 2d;
                       StringNumber x = Dot.X - radius;
                       StringNumber y = Dot.Y - radius;

                       style.AddWidth(DotSize)
                            .AddHeight(DotSize)
                            .Add($"translate({x.ConvertToUnit()}, {y.ConvertToUnit()})");
                   });
    }

    private async Task HandleOnClick(MouseEventArgs e)
    {
        if (Disabled)
        {
            return;
        }

        _boundingRect = await RootRef.GetBoundingClientRectAsync();
        await EmitColor(e.ClientY, e.ClientY);
    }

    private async Task HandleOnMouseDown()
    {
        if (Disabled)
        {
            return;
        }

        _boundingRect = await RootRef.GetBoundingClientRectAsync();

        await Js.AddHtmlElementEventListener<MouseEventArgs>("window", "mousemove", HandleMouseMove, false, new EventListenerExtras()
        {
            Key = $"window-mousemove-{Ref.Id}"
        });
        await Js.AddHtmlElementEventListener("window", "mouseup", HandleOnMouseUp, false, new EventListenerExtras()
        {
            Key = $"window-mouseup-{Ref.Id}"
        });
    }

    private async Task HandleMouseMove(MouseEventArgs e)
    {
        if (Disabled)
        {
            return;
        }

        await EmitColor(e.ClientX, e.ClientY);
    }

    private async Task HandleOnMouseUp()
    {
        await Js.RemoveHtmlElementEventListener("window", "mousemove", $"window-mousemove-{Ref.Id}");
        await Js.RemoveHtmlElementEventListener("window", "mouseup", $"window-mouseup-{Ref.Id}");
    }

    private async Task EmitColor(double x, double y)
    {
        if (_boundingRect is null)
        {
            return;
        }

        var width = Width.ToDouble();
        var height = Height.ToDouble();
        
        var color = Color.FromHSVA(
            h: Color.GetHue(),
            s: Math.Clamp(x - _boundingRect.Left, 0, width) / width,
            v: 1 - Math.Clamp(y - _boundingRect.Top, 0, height) / height,
            a: Color.GetAlpha());

        await OnColorUpdate.InvokeAsync(color);
    }

    private async Task UpdateCanvas()
    {
        if (Color.IsEmpty)
        {
            return;
        }

        var boudingRect = await Refs["canvas"].GetBoundingClientRectAsync();

    }

}
