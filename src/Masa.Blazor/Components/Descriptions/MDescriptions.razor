@namespace Masa.Blazor
@using BlazorComponent.Abstracts
@inherits BDomComponentBase

<div class="@_bem.GenValue(Dense, Bordered).AddTheme(IsDark).Append(Class)"
     style="@Style"
     @ref="Ref">
    <CascadingValue Value="IsDark" Name="IsDark">
        @if (HasHeader)
        {
            <div class="@_bem.Extend("header")">
                @ContentFragment(_bem.Extend("header").Gen("title"), Title, TitleContent)
                @ContentFragment(_bem.Extend("header").Gen("actions"), ActionsContent)
            </div>
        }

        <div class="@_bem.Extend("view")">
            <table>
                <tbody>
                @foreach (var row in Rows)
                {
                    @if (Vertical)
                    {
                        <tr class="@_bem.Extend("row")">
                            @foreach (var cell in row)
                            {
                                @if (Bordered)
                                {
                                    @ThLabel(cell, cell.Span)
                                }
                                else
                                {
                                    <th class="@_bem.Extend("item")" colspan="@cell.Span">
                                        <div class="@_bem.Extend("item-container")">
                                            @ContainerLabel(cell)
                                        </div>
                                    </th>
                                }
                            }
                        </tr>
                        <tr class="@_bem.Extend("row")">
                            @foreach (var cell in row)
                            {
                                @if (Bordered)
                                {
                                    @TdContent(cell, cell.Span)
                                }
                                else
                                {
                                    <td class="@_bem.Extend("item")" colspan="@cell.Span">
                                        <div class="@_bem.Extend("item-container")">
                                            @ContainerContent(cell)
                                        </div>
                                    </td>
                                }
                            }
                        </tr>
                    }
                    else
                    {
                        <tr class="@_bem.Extend("row")">
                            @foreach (var cell in row)
                            {
                                @if (Bordered)
                                {
                                    var thSpan = 1;
                                    var tdSpan = cell.Span * 2 - 1;

                                    @ThLabel(cell, thSpan)

                                    @TdContent(cell, tdSpan)
                                }
                                else
                                {
                                    <td class="@_bem.Extend("item")" colspan="@cell.Span">
                                        <div class="@_bem.Extend("item-container")">
                                            @ContainerLabel(cell)
                                            @ContainerContent(cell)
                                        </div>
                                    </td>
                                }
                            }
                        </tr>
                    }
                }
                </tbody>
            </table>
        </div>
    </CascadingValue>

    <CascadingValue Value="this" IsFixed>
        @ChildContent
    </CascadingValue>
</div>

@code {

    private RenderFragment TdContent(DescriptionsGroupItem cell, int colspan) => __builder =>
    {
        <td class="@_bem.Extend("item").GenValue("content").Append(ContentClass, cell.Class)"
            style="@ContentStyle @cell.Style"
            colspan="@colspan">
            @cell.ChildContent
        </td>
    };

    private RenderFragment ThLabel(DescriptionsGroupItem cell, int colspan) => __builder =>
    {
        <th class="@_bem.Extend("item").GenValue("label").Append(LabelClass, cell.LabelClass)"
            style="@LabelStyle @cell.LabelStyle"
            colspan="@colspan">
            @cell.Label
        </th>
    };

    private RenderFragment ContainerLabel(DescriptionsGroupItem cell) => __builder =>
    {
        <span class="@_bem.Extend("item-container").GenValue("label", !Colon, "no-colon").Append(LabelClass, cell.LabelClass)"
              style="@LabelStyle @cell.LabelStyle">
            @cell.Label
        </span>
    };

    private RenderFragment ContainerContent(DescriptionsGroupItem cell) => __builder =>
    {
        <span class="@_bem.Extend("item-container").GenValue("content").Append(ContentClass, cell.Class)"
              style="@ContentStyle @cell.Style">
            @cell.ChildContent
        </span>
    };

    private RenderFragment ContentFragment(string className, RenderFragment? contentFragment = null) => __builder =>
    {
        @if (contentFragment != null)
        {
            <div class="@className">
                @contentFragment
            </div>
        }
    };

    private RenderFragment ContentFragment(string className, string? content, RenderFragment? contentFragment = null) => __builder =>
    {
        var hasContent = !string.IsNullOrWhiteSpace(content);
        var hasContentFragment = contentFragment != null;

        @if (hasContent || hasContentFragment)
        {
            <div class="@className">
                @if (hasContentFragment)
                {
                    @contentFragment
                }
                else
                {
                    @content
                }
            </div>
        }
    };

}
